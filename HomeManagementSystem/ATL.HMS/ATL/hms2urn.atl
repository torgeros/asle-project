--@path MM_name = /HMS/model/hms.ecore
--@path MM_name = /seg.jUCMNav/src/seg/jUCMNav/emf/urncore.ecore 
--@path MM_name = /seg.jUCMNav/src/seg/jUCMNav/emf/ucm.ecore 

module hms2urn;
create OUT: urn from IN: hms;

helper def: _y : Integer = 50;
helper def: _x : Integer = 50;
helper def: _deltax : Integer = 100;


rule Container {
    from 
		_system : hms!House
	to
	
		_URNdefinition : urn!URNdefinition
		(	
			urnspec <- _URNspec,
			specDiagrams<-_system.rooms->collect(r | r.switches)->flatten()->collect(s | thisModule.resolveTemp(s, '_ucmmap'))->flatten(),
			components<-_system.rooms->collect(r | r.switches)->flatten()->collect(s | thisModule.resolveTemp(s, '_component'))->flatten()
		),
	
		_metadata : urn!Metadata 
		(
			name <- '_Use0to100EvaluationRange',
			value <- 'false'
		),

		_URNspec : urn!URNspec 
		(
			metadata <- _metadata,
			urndef <- _URNdefinition
		),
		
		_ucmspec : urn!UCMspec
		(
			urnspec <- _URNspec
		)	
}

endpoint rule setNodeCoordinatesForAllModels() {
	do {
		-- start placement of nodes for all diagrams, based on the start point of each
		for (sn in thisModule.StartPointCollection) {
			-- NOTE: y coords in here only work with negative COORD_Y_INCR (as it should be anyways by the assgmt specs)
			thisModule.place(sn , sn.x, thisModule.CORNEROFFSET + (thisModule.COORD_Y_INCR.abs() * sn.heightOfSubdiagram(0)), 1);
			sn.contRef.height <- thisModule.COORD_Y_INCR.abs() * (sn.heightOfSubdiagram(0) + 1);
		}
	}
}

rule place (node: urn!PathNode, x: Integer, y: Integer, orJoinsUntilStop: Integer) {
	using {
		nextX: Integer = x + thisModule.COORD_X_INCR;
	}
	do {
		node.x <- x;
		node.y <- y;
		if (node.oclIsKindOf(urn!OrFork)) {
			-- if isOrFork: place bottom, measure height of bottom arm (with included forks), place top arm above everything
			-- longer arm is placed at bottom to be able to set the OrJoin directly at it's x+INCR/y coords.
			if (node.orForkAt1IsLonger()) {
				thisModule.place(node.succ.at(1).target, nextX, y, orJoinsUntilStop + 1);
				let yIncrement: Integer = node.succ.at(1).target.heightOfSubdiagram(0) * thisModule.COORD_Y_INCR in
				thisModule.place(node.succ.at(2).target, nextX, y + yIncrement, orJoinsUntilStop);
			} else {
				thisModule.place(node.succ.at(2).target, nextX, y, orJoinsUntilStop + 1);
				let yIncrement: Integer = node.succ.at(2).target.heightOfSubdiagram(0) * thisModule.COORD_Y_INCR in
				thisModule.place(node.succ.at(1).target, nextX, y + yIncrement, orJoinsUntilStop);
			}
		} else if (node.oclIsKindOf(urn!EndPoint)) {
			-- endpoint as recursion return condition
			node.contRef.width <- x + thisModule.COORDXMARGIN - thisModule.CORNEROFFSET;
		} else {
			if (node.succ.first().target.oclIsKindOf(urn!OrJoin)) {
				-- if isOrJoin, place it. but only if allowed by orJoinsUntilStop param (used to not place joins twice)
				if (orJoinsUntilStop > 1) {
					thisModule.place(node.succ.first().target, nextX, y, orJoinsUntilStop - 1);
				}
			} else {
				-- if no condition matched: just continue with next node
				thisModule.place(node.succ.first().target, nextX, y, orJoinsUntilStop);
			}
		}
	}
}

rule Switch {
	from 
		_switch : hms!Switch
	to
		_startprecondition : urn!Condition
		(
			deltaX <- 40,
			deltaY <- 17,
			label <- '',
			expression <- 'true'
		),
		
		_endpostcondition : urn!Condition
		(
			deltaX <- -40,
			deltaY <- -20,
			label <- '',
			expression <- 'true'
		),
		
		_label : urn!NodeLabel,
		
		_contRef : urn!ComponentRef,
		
		_ucmmap : urn!UCMmap
		(
			name <- _switch.name,
			contRefs <- Set{_contRef}
		),
		
		_startpoint : urn!StartPoint
		(
		
			name <- 'start',
			precondition <- _startprecondition,
			x <- thisModule._x + thisModule._deltax,
			y <- thisModule._y,
			label <- _label,
			contRef <- _contRef,
			diagram <- _ucmmap

		),
		
		_endpoint : urn!EndPoint
		(
			name <- 'end',
			postcondition <- _endpostcondition,
			x <- thisModule._x + thisModule._deltax * 3,
			y <- thisModule._y,
			label <- _label,
			contRef <- _contRef,
			diagram <- _ucmmap
		),
		
		_component : urn!Component
		(
			name <- _ucmmap.name,
			contRefs <- Set{_contRef}
			--collect all path nodes here
		)
	do {
		-- add startnode to collection for later placement
		thisModule.StartPointCollection <- thisModule.StartPointCollection.including(_startpoint);
	}
}

rule DoorSwitch {
	from
		_lock : hms!Lock
	to	
		_orfork1 : urn!OrFork
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
		_orfork2 : urn!OrFork
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
		_orfork3 : urn!OrFork
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
		
		_orjoin1 : urn!OrJoin 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
		_orjoin2 : urn!OrJoin 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
		_orjoin3 : urn!OrJoin 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	
	_resp_close : urn!Responsibility
	(
		name <- 'Close Door',
		urndefinition <- thisModule.resolveTemp(_lock.holder.room.house, '_URNdefinition')
	),
	
	_respRef_close1 : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap'),
		hostDemand <- 'Close Door',
		respDef <- _resp_close
	),
	
	_respRef_close2 : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap'),
		hostDemand <- 'Close Door',
		respDef <- _resp_close
	),
	
	_resp_lock : urn!Responsibility
	(
		name <- 'Lock Door',
		urndefinition <- thisModule.resolveTemp(_lock.holder.room.house, '_URNdefinition')
	),
	
	_respRef_lock : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap'),
		hostDemand <- 'Lock Door',
		respDef <- _resp_lock
	),
	
	_resp_unlock : urn!Responsibility
	(
		name <- 'Unlock Door',
		urndefinition <- thisModule.resolveTemp(_lock.holder.room.house, '_URNdefinition')
	),
	
	
	_respRef_unlock1 : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap'),
		hostDemand <- 'Unlock Door',
		respDef <- _resp_unlock
	),
	
	_respRef_unlock2 : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap'),
		hostDemand <- 'Unlock Door',
		respDef <- _resp_unlock
	),
	
	_connection1 : urn!NodeConnection
	(
		source <- thisModule.resolveTemp(_lock.switch, '_startpoint'),
		target <- _orfork1,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection2 : urn!NodeConnection
	(
		source <- _orfork1,
		target <- _respRef_unlock1,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	
	_connection3 : urn!NodeConnection
	(
		source <- _respRef_unlock1,
		target <- _orjoin3,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection4 : urn!NodeConnection
	(
		source <- _orfork1,
		target <- _orfork2,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection5 : urn!NodeConnection
	(
		source <- _orfork2,
		target <- _orfork3,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection6 : urn!NodeConnection
	(
		source <- _orfork3,
		target <- _respRef_unlock2,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection7 : urn!NodeConnection
	(
		source <- _respRef_unlock2,
		target <- _respRef_close2,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection8 : urn!NodeConnection
	(
		source <- _respRef_close2,
		target <- _orjoin1,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection9 : urn!NodeConnection
	(
		source <- _orjoin1,
		target <- _orjoin2,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection10 : urn!NodeConnection
	(
		source <- _orjoin2,
		target <- _respRef_lock,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection11 : urn!NodeConnection
	(
		source <- _orfork2,
		target <- _orjoin2,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection12 : urn!NodeConnection
	(
		source <- _orfork3,
		target <- _respRef_close1,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection13 : urn!NodeConnection
	(
		source <- _respRef_close1,
		target <- _orjoin1,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	
	_connection14 : urn!NodeConnection
	(
		source <- _respRef_lock,
		target <- _orjoin3,
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
	_connection15 : urn!NodeConnection
	(
		source <- _orjoin3,
		target <- thisModule.resolveTemp(_lock.switch, '_endpoint'),
		diagram <- thisModule.resolveTemp(_lock.switch, '_ucmmap')
	),
	
		
	
	_conditionUNLOCKED : urn!Condition
	(
		label <- 'UNLOCKED',
		nodeConnection <- _connection2 
	),
	
	_conditionLOCKED : urn!Condition
	(
		label <- 'LOCKED',
		nodeConnection <- _connection4 
	),
	
	_conditionLOCKED1 : urn!Condition
	(
		label <- 'LOCKED',
		nodeConnection <- _connection6 
	),
	
	_conditionUNLOCKED1 : urn!Condition
	(
		label <- 'UNLOCKED',
		nodeConnection <- _connection12
	),
	
	
	_conditionCLOSED : urn!Condition
	(
		label <- 'CLOSED',
		nodeConnection <- _connection11 
	),
	_conditionOPEN : urn!Condition
	(
		label <- 'OPEN',
		nodeConnection <- _connection5 
	)
	
	
}


rule LightbulbSwitch {
	from 
		_lightbulb : hms!Lightbulb
	to
	_orfork : urn!OrFork
	(
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_orjoin : urn!OrJoin 
	(
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_resp_turnOn : urn!Responsibility
	(
		name <- 'Turn Light ON',
		urndefinition <- thisModule.resolveTemp(_lightbulb.room.house, '_URNdefinition')
	),
	
	_respRef_turnON : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap'),
		hostDemand <- 'Turn Light ON',
		respDef <- _resp_turnOn
	),
	
	_respRef_turnOFF : urn!RespRef 
	(
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap'),
		name <- 'Turn Light OFF'
	),
	
	_connection1 : urn!NodeConnection
	(
		source <- thisModule.resolveTemp(_lightbulb.switch, '_startpoint'),
		target <- _orfork,
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_connection2 : urn!NodeConnection
	(
		source <- _orfork,
		target <- _respRef_turnON,
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_connection3 : urn!NodeConnection
	(
		source <- _respRef_turnON,
		target <- _orjoin,
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_connection4 : urn!NodeConnection
	(
		source <- _orjoin,
		target <- thisModule.resolveTemp(_lightbulb.switch, '_endpoint'),
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_connection5: urn!NodeConnection
	(
		source <- _orfork,
		target <- _respRef_turnOFF,
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	_connection6 : urn!NodeConnection
	(
		source <- _respRef_turnOFF,
		target <- _orjoin,
		diagram <- thisModule.resolveTemp(_lightbulb.switch, '_ucmmap')
	),
	
	
	_conditionON : urn!Condition
	(
		label <- 'ON',
		nodeConnection <- _connection2
	),
	
	_conditionOFF : urn!Condition
	(
		label <- 'OFF',
		nodeConnection <- _connection5
	)
	
	
}


-- parameter: to keep track of all the start nodes, to be able to re-use them in the endpoint rule
helper def: StartPointCollection: Bag(urn!StartPoint) = Bag{};

-- helper: to figure out which arm of an or-split is longer
helper context urn!OrFork def: orForkAt1IsLonger(): Boolean =
	let node1: hms!BooleanExpression = self.succ.at(1).target in
	let node2: hms!BooleanExpression = self.succ.at(2).target in
	node1.nodesUntilOrJoin(0) >= node2.nodesUntilOrJoin(0);

-- helper helper: measure length of nodes in an OR-arm, call with orJoinsUntilStop=0 on at(1) and at(2) and compare. undefined behaviour when there is no or join coming.
helper context urn!PathNode def: nodesUntilOrJoin(orJoinsUntilStop: Integer): Integer =
	if self.oclIsKindOf(urn!OrJoin) then
		if orJoinsUntilStop = 0 then 0 else 1 + self.succ.at(1).target.nodesUntilOrJoin(orJoinsUntilStop - 1) endif
	else if self.oclIsKindOf(urn!OrFork) then
		1 + self.succ.at(1).target.nodesUntilOrJoin(orJoinsUntilStop + 1).
		max(self.succ.at(2).target.nodesUntilOrJoin(orJoinsUntilStop + 1))
	else
		1 + self.succ.at(1).target.nodesUntilOrJoin(orJoinsUntilStop)
	endif endif;

-- helper: to find the height (in nodes / y-increments) of the subdiagram produced by a node until the next or-join. call with (0).
helper context urn!PathNode def: heightOfSubdiagram(orJoinsUntilStop: Integer): Integer =
	if self.oclIsKindOf(urn!OrJoin) then
		if orJoinsUntilStop = 0 then 1 else self.succ.at(1).target.heightOfSubdiagram(orJoinsUntilStop - 1) endif
	else if self.oclIsKindOf(urn!OrFork) then
		self.succ.at(1).target.heightOfSubdiagram(orJoinsUntilStop + 1) + self.succ.at(2).target.heightOfSubdiagram(orJoinsUntilStop + 1)
	else if self.oclIsKindOf(urn!EndPoint) then
		1
	else
		self.succ.at(1).target.heightOfSubdiagram(orJoinsUntilStop)
	endif endif endif;

-- parameters: coordinate placement behaviour
helper def: CORNEROFFSET: Integer = 50;
helper def: COORD_X_INCR: Integer = 250;
helper def: COORD_Y_DEFAULT: Integer = 200 + thisModule.CORNEROFFSET;
helper def: COORD_Y_INCR: Integer = 0-100;
helper def: COORDXMARGIN: Integer = 150;
